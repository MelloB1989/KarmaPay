input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

input CreateCustomerInput {
	uid: ID!
	cid: ID!
	c_email: String
	c_ip: String
	c_location: String
	c_name: String!
	c_phone: String
}

input CreateOrderInput {
	uid: ID!
	orderAmt: Float!
	orderCid: ID!
	orderCurrency: String!
	orderDescription: String
	orderID: ID!
	orderStatus: String!
	orderTimestamp: String!
	orderUpiTrnx: String
}

input CreateUserAPIKeyInput {
	uid: ID!
	id: ID!
	apiKey: String!
	pgEnum: String!
}

input CreateUserInput {
	email: String!
	uid: ID!
	api_keys: [ID]
	business_name: String
	business_url: String
	customers: [ID]
	orders: [ID]
	pfp: String
	subdomain: String
	subdomain_status: String
}

type Customer {
	uid: ID!
	cid: ID!
	c_email: String
	c_ip: String
	c_location: String
	c_name: String!
	c_phone: String
}

type CustomerConnection {
	items: [Customer]
	nextToken: String
}

input DeleteCustomerInput {
	uid: ID!
	cid: ID!
}

input DeleteOrderInput {
	uid: ID!
	orderID: ID!
}

input DeleteUserAPIKeyInput {
	uid: ID!
	id: ID!
}

input DeleteUserInput {
	email: String!
}

input ModelSizeInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
}

type Order {
	uid: ID!
	orderAmt: Float!
	orderCid: ID!
	orderCurrency: String!
	orderDescription: String
	orderID: ID!
	orderStatus: String!
	orderTimestamp: String!
	orderUpiTrnx: String
}

type OrderConnection {
	items: [Order]
	nextToken: String
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
	attributeExists: Boolean
}

input TableCustomerFilterInput {
	uid: TableIDFilterInput
	cid: TableIDFilterInput
	c_email: TableStringFilterInput
	c_ip: TableStringFilterInput
	c_location: TableStringFilterInput
	c_name: TableStringFilterInput
	c_phone: TableStringFilterInput
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	attributeExists: Boolean
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	attributeExists: Boolean
	size: ModelSizeInput
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	attributeExists: Boolean
}

input TableOrderFilterInput {
	uid: TableIDFilterInput
	orderAmt: TableFloatFilterInput
	orderCid: TableIDFilterInput
	orderCurrency: TableStringFilterInput
	orderDescription: TableStringFilterInput
	orderID: TableIDFilterInput
	orderStatus: TableStringFilterInput
	orderTimestamp: TableStringFilterInput
	orderUpiTrnx: TableStringFilterInput
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	attributeExists: Boolean
	size: ModelSizeInput
}

input TableUserAPIKeyFilterInput {
	uid: TableIDFilterInput
	id: TableIDFilterInput
	apiKey: TableStringFilterInput
	pgEnum: TableStringFilterInput
}

input TableUserFilterInput {
	email: TableStringFilterInput
	uid: TableIDFilterInput
	api_keys: TableIDFilterInput
	business_name: TableStringFilterInput
	business_url: TableStringFilterInput
	customers: TableIDFilterInput
	orders: TableIDFilterInput
	pfp: TableStringFilterInput
	subdomain: TableStringFilterInput
	subdomain_status: TableStringFilterInput
}

input UpdateCustomerInput {
	uid: ID!
	cid: ID!
	c_email: String
	c_ip: String
	c_location: String
	c_name: String
	c_phone: String
}

input UpdateOrderInput {
	uid: ID!
	orderAmt: Float
	orderCid: ID
	orderCurrency: String
	orderDescription: String
	orderID: ID!
	orderStatus: String
	orderTimestamp: String
	orderUpiTrnx: String
}

input UpdateUserAPIKeyInput {
	uid: ID!
	id: ID!
	apiKey: String
	pgEnum: String
}

input UpdateUserInput {
	email: String!
	uid: ID
	api_keys: [ID]
	business_name: String
	business_url: String
	customers: [ID]
	orders: [ID]
	pfp: String
	subdomain: String
	subdomain_status: String
}

type User {
	email: String!
	uid: ID!
	api_keys: [ID]
	business_name: String
	business_url: String
	customers: [ID]
	orders: [ID]
	pfp: String
	subdomain: String
	subdomain_status: String
}

type UserAPIKey {
	uid: ID!
	id: ID!
	apiKey: String!
	pgEnum: String!
}

type UserAPIKeyConnection {
	items: [UserAPIKey]
	nextToken: String
}

type UserConnection {
	items: [User]
	nextToken: String
}

type Mutation {
	createCustomer(input: CreateCustomerInput!): Customer
	updateCustomer(input: UpdateCustomerInput!): Customer
	deleteCustomer(input: DeleteCustomerInput!): Customer
	createUser(input: CreateUserInput!): User
	updateUser(input: UpdateUserInput!): User
	deleteUser(input: DeleteUserInput!): User
	createUserAPIKey(input: CreateUserAPIKeyInput!): UserAPIKey
	updateUserAPIKey(input: UpdateUserAPIKeyInput!): UserAPIKey
	deleteUserAPIKey(input: DeleteUserAPIKeyInput!): UserAPIKey
	createOrder(input: CreateOrderInput!): Order
	updateOrder(input: UpdateOrderInput!): Order
	deleteOrder(input: DeleteOrderInput!): Order
}

type Query {
	getCustomer(uid: ID!, cid: ID!): Customer
	listCustomers(filter: TableCustomerFilterInput, limit: Int, nextToken: String): CustomerConnection
	getUser(email: String!): User
	listUsers(filter: TableUserFilterInput, limit: Int, nextToken: String): UserConnection
	queryUsersByEmailUidIndex(uid: ID!, first: Int, after: String): UserConnection
	getUserAPIKey(uid: ID!, id: ID!): UserAPIKey
	listUserAPIKeys(filter: TableUserAPIKeyFilterInput, limit: Int, nextToken: String): UserAPIKeyConnection
	getOrder(uid: ID!, orderID: ID!): Order
	listOrders(filter: TableOrderFilterInput, limit: Int, nextToken: String): OrderConnection
}

type Subscription {
	onCreateCustomer(
		uid: ID,
		cid: ID,
		c_email: String,
		c_ip: String,
		c_location: String
	): Customer
		@aws_subscribe(mutations: ["createCustomer"])
	onUpdateCustomer(
		uid: ID,
		cid: ID,
		c_email: String,
		c_ip: String,
		c_location: String
	): Customer
		@aws_subscribe(mutations: ["updateCustomer"])
	onDeleteCustomer(
		uid: ID,
		cid: ID,
		c_email: String,
		c_ip: String,
		c_location: String
	): Customer
		@aws_subscribe(mutations: ["deleteCustomer"])
	onCreateUser(
		email: String,
		uid: ID,
		api_keys: [ID],
		business_name: String,
		business_url: String
	): User
		@aws_subscribe(mutations: ["createUser"])
	onUpdateUser(
		email: String,
		uid: ID,
		api_keys: [ID],
		business_name: String,
		business_url: String
	): User
		@aws_subscribe(mutations: ["updateUser"])
	onDeleteUser(
		email: String,
		uid: ID,
		api_keys: [ID],
		business_name: String,
		business_url: String
	): User
		@aws_subscribe(mutations: ["deleteUser"])
	onCreateUserAPIKey(
		uid: ID,
		id: ID,
		apiKey: String,
		pgEnum: String
	): UserAPIKey
		@aws_subscribe(mutations: ["createUserAPIKey"])
	onUpdateUserAPIKey(
		uid: ID,
		id: ID,
		apiKey: String,
		pgEnum: String
	): UserAPIKey
		@aws_subscribe(mutations: ["updateUserAPIKey"])
	onDeleteUserAPIKey(
		uid: ID,
		id: ID,
		apiKey: String,
		pgEnum: String
	): UserAPIKey
		@aws_subscribe(mutations: ["deleteUserAPIKey"])
	onCreateOrder(
		uid: ID,
		orderAmt: Float,
		orderCid: ID,
		orderCurrency: String,
		orderDescription: String
	): Order
		@aws_subscribe(mutations: ["createOrder"])
	onUpdateOrder(
		uid: ID,
		orderAmt: Float,
		orderCid: ID,
		orderCurrency: String,
		orderDescription: String
	): Order
		@aws_subscribe(mutations: ["updateOrder"])
	onDeleteOrder(
		uid: ID,
		orderAmt: Float,
		orderCid: ID,
		orderCurrency: String,
		orderDescription: String
	): Order
		@aws_subscribe(mutations: ["deleteOrder"])
}